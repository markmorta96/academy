v1
<script runat="server">
    Platform.Load("Core", "1");

    // Configuration
    var subDomain = "mc4fr7rnvdyszcxppqbhvywvjcd4"; // Replace with your subdomain
    var clientId = "mn45cd0jj7p35w185ezn8l1t"; // Replace with your Client ID
    var clientSecret = "XB2QlLYh5GtRYrhPcVkACrgc"; // Replace with your Client Secret
    var mustContainString = "QRhaha" // Replace with your must contain naming convention
    var maxDate = "2025-01-01" // Replace with your date, assets created before such date will be target for deletion format "yyyy-mm-dd" sample "2025-05-28"
    var asset_id = [];

    var accessToken = getAccessToken(clientId, clientSecret, subDomain);
    queryAssets(accessToken, subDomain);
    for (var i = 0; i < asset_id.length; i++) {
        deleteAsset(accessToken, subDomain, asset_id[i]);
    }


    // Function to get access token
    function getAccessToken(clientId1, clientSecret1, subDomain1) {
        var payload = {
            "grant_type": "client_credentials",
            "client_id": clientId1,
            "client_secret": clientSecret1
        };
        var authurl = "https://" + subDomain1 + ".auth.marketingcloudapis.com/v2/token";
        var result = HTTP.Post(authurl, 'application/json', Stringify(payload));

        if (result.StatusCode == 200) {
            var responseJson = Platform.Function.ParseJSON(result.Response[0]);
            var accessToken = responseJson.access_token;
            var restUrl = responseJson.rest_instance_url;
        } else {
            throw new Error("Error fetching access token");
        }
        return accessToken;
    }

    // Function to query the assets by created_date and name 
    function queryAssets(accessToken2, subDomain2) {
        var payload = {
            "page":
            {
                "page": 1,
                "pageSize": 50
            },

            "query":
            {
                "leftOperand":
                {
                    "property": "createdDate",
                    "simpleOperator": "lessThan",
                    "value": maxDate + "T13:35:27.327-06:00"
                },
                "logicalOperator": "AND",
                "rightOperand":
                {
                    "property": "Name",
                    "simpleOperator": "like",
                    "value": mustContainString
                }
            },

            "sort":
                [
                    { "property": "id", "direction": "ASC" }
                ],

            "fields":
                [
                    "enterpriseId",
                    "memberId",
                    "thumbnail",
                    "category",
                    "content",
                    "data"
                ]
        };
        var endpoint = "https://" + subDomain2 + ".rest.marketingcloudapis.com/asset/v1/content/assets/query";
        var contenttype = 'application/json';
        var bearerToken = 'Bearer ' + accessToken2;
        var headerName = ['Authorization'];
        var headerValue = [bearerToken];
        try {
            var result = HTTP.Post(endpoint, contenttype, Stringify(payload), headerName, headerValue);
            var jsonResponse = Platform.Function.ParseJSON(result.Response[0]);
            var items = jsonResponse.items;
            for (var i = 0; i < items.length; i++) {
                Write("Asset ID: " + items[i].id + "<br>");
                asset_id[i] = items[i].id;
            }
        } catch (error) {
            Write("Error");
        }
        
    }

    // Function to delete the returned assets
    function deleteAsset(accessToken3, subDomain3, assetID) {
        var api = new Script.Util.WSProxy();
        Write(assetID);
        var restInstanceUrl = "https://" + subDomain3 + ".rest.marketingcloudapis.com/",
            accessToken = accessToken3;

        try {

            var id = assetID;

            var endpoint = restInstanceUrl + "asset/v1/content/assets/" + assetID;

            var request = new Script.Util.HttpRequest(endpoint);
            request.emptyContentHandling = 0;
            request.retries = 2;
            request.continueOnError = true;
            request.setHeader("Authorization", "Bearer " + accessToken);
            request.method = "DELETE";
            request.contentType = "application/json";

            var results = request.send();

            var result = results.statusCode;

            Write(Stringify(result));
            if(result == "200"){
              Write("Asset " + assetID + "has been Deleted, ");
            }else {
              Write("Error");
            }
            
        } catch (error) {

            Write(Stringify(error));

        }
    }


</script>
