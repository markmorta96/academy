<script runat="server">

    Platform.Load("core", "1");
    var api = new Script.Util.WSProxy();
    var results = {};
    var config = {
        parentBU: '518003676',
        folder1: '807708',
        folder2: '807700'
    }

    try {
        results.dataextensions = retrieveDataExtensions();
        results.folder_ids = retrieveDataFolderIds();
        results.filtered = filterSharedDataExtensions(results.dataextensions, results.folder_ids);
        results.count = {
            dataextensions: results.dataextensions.length,
            folder_ids: results.folder_ids.length,
            shared_dataextensions: results.filtered.length
        };
        table(results);
        Write(Stringify(results.count));

    } catch (error) {
        Write(Stringify(error));

    }

    function filterSharedDataExtensions(dataextensions, folder_ids) {
        var result = [];
        for (var k in dataextensions) {
            var dataextension = dataextensions[k];
            for (var i = 0; i < folder_ids.length; i++) {
                var folder_id = folder_ids[i];
                if (dataextension.CategoryID == folder_id) {
                    result.push(dataextension);
                }
            }
        }
        return result;

    }
    function retrieveDataExtensions() {

        var filter = {
            LeftOperand: {
                Property: 'CustomerKey',
                SimpleOperator: 'isNotNull',
                Value: ' '
            },
            LogicalOperator: "AND",
            RightOperand: {
                LogicalOperator: "AND",
                LeftOperand: {
                    Property: 'Client.ID',
                    SimpleOperator: 'equals',
                    Value: config.parentBU
                },
                LogicalOperator: "AND",
                RightOperand: {
                    LogicalOperator: "OR",
                    LeftOperand: {
                        Property: 'CategoryID',
                        SimpleOperator: 'equals',
                        Value: config.folder1
                    },
                    RightOperand: {
                        Property: 'CategoryID',
                        SimpleOperator: 'equals',
                        Value: config.folder2
                    }
                }
            }
        };

        var request = api.retrieve("DataExtension", ["Name", "CustomerKey", "CategoryID", "ModifiedDate"], filter, true);
        var result = [];
        for (var k in request.Results) {
            result.push({
                Name: request.Results[k].Name,
                CustomerKey: request.Results[k].CustomerKey,
                CategoryID: request.Results[k].CategoryID,
                ModifiedDate: request.Results[k].ModifiedDate,
                FolderPath: pathFolder(request.Results[k].Name, request.Results[k].CategoryID)
            });
        }
        return result;

    }

    function retrieveDataFolderIds() {
        var filter = {
            LeftOperand: {
                Property: 'CustomerKey',
                SimpleOperator: 'isNotNull',
                Value: ' '
            },
            LogicalOperator: "AND",
            RightOperand: {
                Property: 'Client.ID',
                SimpleOperator: 'equals',
                Value: config.parentBU
            }
        };

        var request = api.retrieve("DataFolder", ["ID", "Name", "ContentType"], filter, true);
        var result = [];
        for (var k in request.Results) {
            result.push(request.Results[k].ID);
        }
        return result;

    }

    function table(results) {

        results.dataextensions.sort(function (a, b) {
            return new Date(b.ModifiedDate) - new Date(a.ModifiedDate);
        });

        var html = '<table border="1"><tr><th>Data Extension Name</th><th>Customer Key</th><th>Category ID</th><th>Last Modified Date</th><th>Folder Path</th></tr>';

        for (var i = 0; i < results.dataextensions.length; i++) {
            html += '<tr><td>' + results.dataextensions[i].Name + '</td><td>' + results.dataextensions[i].CustomerKey + '</td><td>' + results.dataextensions[i].CategoryID +
                '</td><td>' + results.dataextensions[i].ModifiedDate + '</td><td>' + results.dataextensions[i].FolderPath + '</td></tr>';
        }

        html += '</table>';

        Write(html);
    }

    function pathFolder(a, b) {
        var FolderID = b;
        var DEname = a;
        var list = [];
        list.push(DEname);
        var path = function (id) {
            if (id > 0) {
                var results = Folder.Retrieve({ Property: "ID", SimpleOperator: "equals", Value: id });
                list.unshift(results[0].Name);
                return path(results[0].ParentFolder.ID);
            } else {
                return id;
            }
        };
        path(FolderID);
        var t = list.join("> ");
        return (t);
    }



</script>
