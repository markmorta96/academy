<script runat="server">

    Platform.Load("core", "1");
    var api = new Script.Util.WSProxy();
    var results = {};
    var config = {
        parentBU: '518003676',
        folder1: '807708',
        folder2: '807700'
    }

    try {

        if (post == null) return;

        var resName = [];
        var resCustomerKey = [];
        var resCategoryID = [];
        var resModifiedDate = [];
        var resFolderPath = [];

        var filter = {
            LeftOperand: {
                Property: 'CustomerKey',
                SimpleOperator: 'isNotNull',
                Value: ' '
            },
            LogicalOperator: "AND",
            RightOperand: {
                LogicalOperator: "AND",
                LeftOperand: {
                    Property: 'Client.ID',
                    SimpleOperator: 'equals',
                    Value: config.parentBU
                },
                LogicalOperator: "AND",
                RightOperand: {
                    LogicalOperator: "OR",
                    LeftOperand: {
                        Property: 'CategoryID',
                        SimpleOperator: 'equals',
                        Value: config.folder1
                    },
                    RightOperand: {
                        Property: 'CategoryID',
                        SimpleOperator: 'equals',
                        Value: config.folder2
                    }
                }
            }
        };

        
        var result = [];
        
        return result;

        var opts = {
            BatchSize: 30
        };

        var props = {
            QueryAllAccounts: false
        };

        if (post.reqID) props.ContinueRequest = post.reqID;

        var req = api.retrieve("DataExtension", ["Name", "CustomerKey", "CategoryID", "ModifiedDate"], filter, true);

        if (req) {

            var results = req.Results;

            for (var k in results) {
                resName.push(results[k].Name);
                
            }

            Write(Stringify({
                status: (req.HasMoreRows) ? 201 : 200,
                reqID: req.RequestID,
                results: resName
            }));

        } else {
            throw req;
        }

    } catch (error) {
        Write(Stringify(error));

    }


</script>
%%[IF @ContentJson != "True" THEN]%%
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css">
</head>
<body>
    
    <table x-data="myApp()">
        <tr>
            <th>Number</th>
            <th>Name</th>
        </tr>
        <template x-for="(name, i) in results">
            <tr>
                <td x-text="i"></td>
                <td x-text="name"></td>
        </template>
    </table>

    <script>

        function myApp() {

            return {
                status: 100,
                results: [],
                reqID: null,
                init() {
                    this.performRequests();
                },
                async performRequests() {

                    while(this.status != 200) {

                        let req = await this.performSingleRequest(this.reqID);

                        if(req.status == 500) break;

                        this.status = req.status;
                        this.reqID = req.reqID;
                        this.results = [...new Set([...this.results, ...req.results])];

                    }

                    this.reqID = null

                },
                async performSingleRequest(reqID) {

                    return await (await fetch("%%=RequestParameter('PAGEURL')=%%", { method: "POST", body: JSON.stringify({ reqID: reqID }) } )).json();

                }
            }

        }

    </script>
    <p>
    vew
    </p>
</body>
</html>
%%[ENDIF]%%
